; Mapip family.  -*- Scheme -*-
; Copyright 2000, 2001, 2011 Free Software Foundation, Inc.
; Contributed by Johan Rydberg, jrydberg@opencores.org
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

(include "simplify.inc")

; Mapip is the virtual processor used by MoSync,
; a cross-platform SDK for mobile devices.
; It is a simple 32-bit architecture with about 50 opcodes.
; In the future we will add isa mapip32f,
; which will have 32 64-bit floating-point registers, and opcodes to match.

(define-arch
	(name mapip)
	(comment "Mapip")
	(insn-lsb0? #t)
	(machs mapip)
	(isas mapip32)
)

; IDOC attribute for instruction documentation.

(define-attr
	(for insn)
	(type enum)
	(name IDOC)
	(comment "insn kind for documentation")
	(attrs META)
	(values
		(MEM - () "Memory")
		(ALU - () "ALU")
		(FPU - () "FPU")
		(BR - () "Branch")
		(MISC - () "Miscellaneous")
	)
)


; Instruction set parameters.

(define-isa
	; Name of the ISA.
	(name mapip32)

	; Base instruction length, in bits.
	(base-insn-bitsize 8)
)

; CPU family definitions.

(define-cpu
	; CPU names must be distinct from the architecture name and machine names.
	; The "b" suffix stands for "base" and is the convention.
	; The "f" suffix stands for "family" and is the convention.
	(name mapipbf)
	(comment "Mapip base family")
	(endian little)
	(word-bitsize 32)
)

; Generic machine
(define-mach
	(name mapip)
	(comment "Generic Mapip cpu")
	(cpu mapipbf)
	(bfd-name "mapip")
)


; Model descriptions

; Generic OpenRISC model
(define-model
	(name mapip-1)
	(comment "Mapip generic model")
	(attrs)
	(mach mapip)

	; Nothing special about this.
	(unit u-exec "Execution Unit" () 1 1 () () () ())
)

; Hardware

(dnh h-pc "program counter" (PC PROFILE) (pc) () () ())

;  GPRs

(define-keyword
	(name gpr-names)
	(print-name h-gpr)
	(prefix "")
	(values
		(zr 0) (sp 1) (ra 2) (fp 3)
		(s0 4) (s1 5) (s2 6) (s3 7) (s4 8) (s5 9) (s6 10) (s7 11)
		(p0 12) (p1 13) (p2 14) (p3 15)
		(g0 16) (g1 17) (g2 18) (g3 19) (g4 20) (g5 21) (g6 22) (g7 23)
		(g8 24) (g9 25) (g10 26) (g11 27) (g12 28) (g13 29) (r0 30) (r1 31)
	)
)

(define-hardware
	(name h-gpr)
	(comment "general purpose registers")
	(attrs)
	(type register WI (32))
	(indices extern-keyword gpr-names)
)

(define-attr
  (for operand)
  (type boolean)
  (name HASH-PREFIX)
  (comment "immediates have a required '#' prefix")
)

; Instruction fields
(define-ifield
	(name f-op)
	(comment "f-opcode")
	(attrs)
	(word-offset 0)
	(word-length 8)
	(start 0)
	(length 8)
	(mode UINT)
)

(define-ifield
	(name f-r1)
	(comment "f-reg1")
	(attrs)
	(word-offset 0)
	(word-length 8)
	(start 0)
	(length 8)
	(mode UINT)
)

(define-ifield
	(name f-r2)
	(comment "f-reg2")
	(attrs)
	(word-offset 0)
	(word-length 8)
	(start 0)
	(length 8)
	(mode UINT)
)

(define-ifield
	(name f-imm)
	(comment "f-imm")
	(attrs)
	(word-offset 0)
	(word-length 32)
	(start 0)
	(length 32)
	(mode UINT)
)

(define-ifield
	(name f-aaddr)
	(comment "absolute address")
	(attrs ABS-ADDR)
	(word-offset 0)
	(word-length 32)
	(start 0)
	(length 32)
	(mode UINT)
)

(define-ifield
	(name f-raddr)
	(comment "pc-relative address")
	(attrs PCREL-ADDR)
	(word-offset 0)
	(word-length 32)
	(start 0)
	(length 32)
	(mode UINT)
)


; Instruction operands

(dnop rd "destination register" () h-gpr f-r1)
(dnop rs "source register" () h-gpr f-r2)
(dnop simm "signed immediate" () h-sint f-imm)
(dnop aiaddr "absolute instruction address" (RELAX) h-iaddr f-aaddr)
(dnop riaddr "pc-relative instruction address" (RELAX) h-iaddr f-raddr)
(dnop adaddr "absolute data address" (RELAX) h-addr f-aaddr)

(define-operand
  (name imm)
  (comment "hash signed immediate")
  (attrs)
  (type h-sint)
  (index f-imm)
  (handlers (parse "mp2imm"))
)

; Instruction classes

(define-pmacro (define-arith-insn-custom xname xrtx)
	"Define an arithmetic instruction pair (custom rtx)."
	(begin
		; register version
		(define-insn
			(name xname)
			(comment (.str xname))
			(syntax (.str xname " $rd,$rs"))
			(format (+ (.sym OP_ (.upcase xname)) rd rs))
			(semantics (set rd (xrtx rd rs)))
		)
		; immediate version
		(define-insn
			(name (.sym xname "i"))
			(comment (.str xname "i"))
			(syntax (.str xname " $rd,$imm"))
			(format (+ (.sym OP_ (.upcase xname) I) rd imm))
			(semantics (set rd (xrtx rd imm)))
		)
	)
)

(define-pmacro (define-ld-insn xname xsuffix xmode)
	"Define a load-from-memory instruction."
	(begin
		(define-insn
			(name xname)
			(comment (.str xname))
			(attrs)
			(syntax (.str "ld" xsuffix " $rd,[$rs,$adaddr]"))
			(format (+ (.sym OP_ (.upcase xname)) rd rs adaddr))
			(semantics (set rd (mem xmode (add rs adaddr))))
		)
		(define-normal-macro-insn
			(.sym xname "0") (.str xname "0") ()
			(.str "ld" xsuffix " $rd,[$rs]")
			(emit xname rd rs (adaddr 0))
		)
		(define-normal-macro-insn
			(.sym xname "i") (.str xname "i") ()
			(.str "ld" xsuffix " $rd,[&$adaddr]")
			(emit xname rd (rs 0) adaddr)
		)
;  unknown operand: (add adaddr simm)
;		(define-normal-macro-insn
;			(.sym xname "i2") (.str xname "i2") ()
;			"ld $rd,[$adaddr+$simm]"
;			(emit xname rd (rs 0) (add adaddr simm))
;		)
		; temporary instruction until I figure out how do deal with symbol+offset operands.
		(define-insn
			(name (.sym xname "i2"))
			(comment (.str xname "i2"))
			(attrs)
			(syntax (.str "ld" xsuffix " $rd,[&$adaddr+$simm]"))
			(format (+ (.sym OP_ (.upcase xname)) rd rs adaddr simm))
			(semantics (set rd (mem xmode (add adaddr simm))))
		)
	)
)

(define-pmacro (define-st-insn xname xsuffix xmode)
	"Define a store-to-memory instruction."
	(begin
		(define-insn
			(name xname)
			(comment (.str xname))
			(attrs)
			(syntax (.str "ld" xsuffix " [$rd,$adaddr],$rs"))
			(format (+ (.sym OP_ (.upcase xname)) rd rs adaddr))
			(semantics (set (mem xmode (add rs adaddr)) rd))
		)
		(define-normal-macro-insn
			(.sym xname "0") (.str xname "0") ()
			(.str "ld" xsuffix " [$rd],$rs")
			(emit xname rd rs (adaddr 0))
		)
		(define-normal-macro-insn
			(.sym xname "i") (.str xname "i") ()
			(.str "ld" xsuffix " [&$adaddr],$rs")
			(emit xname rd (rs 0) adaddr)
		)
		; temporary instruction until I figure out how do deal with symbol+offset operands.
		(define-insn
			(name (.sym xname "i2"))
			(comment (.str xname "i2"))
			(attrs)
			(syntax (.str "ld" xsuffix " [&$adaddr+$simm],$rs"))
			(format (+ (.sym OP_ (.upcase xname)) rd rs adaddr simm))
			(semantics (set rd (mem xmode (add adaddr simm))))
		)
	)
)

(define-pmacro (define-arith-insn xname)
	"Define an arithmetic instruction pair."
	(define-arith-insn-custom xname xname)
)

(define-pmacro (define-jc-insn xcond)
	"Define an conditional jump instruction."
	; plain immediate
	(begin
	(define-insn
		(name (.sym jc "_" xcond))
		(comment (.str jc "_" xcond))
		(syntax (.str jc " " xcond ",$rd,$rs,[#$imm]"))
		(format (+ (.sym OP_JC_ (.upcase xcond)) rd rs imm))
		(semantics (if (xcond rd rs) (set pc imm)))
	)
	; with offset
	(define-insn
		(name (.sym jc "_2" xcond))
		(comment (.str jc "_2" xcond))
		(syntax (.str jc " " xcond ",$rd,$rs,$simm,[#$imm]"))
		(format (+ (.sym OP_JC_ (.upcase xcond)) rd rs aiaddr))
		(semantics (if (xcond rd rs) (set pc simm)))
	))
)

(include "mapip2-opcodes.inc")

; todo: fix all opcode values.
; Instructions

(define-ld-insn ldw "" SI)
(define-ld-insn ldb ".b" QI)
(define-ld-insn ldh ".h" HI)

(define-st-insn stw "" SI)
(define-st-insn stb ".b" QI)
(define-st-insn sth ".h" HI)

(define-insn
	(name callr)
	(comment "call reg")
	(syntax "call $rd")
	(format (+ OP_CALLR rd))
	(semantics (sequence ()
		; save return address
		(set (reg ra) (add (reg pc) 4))
		; jump
		(set pc rd)
		))
)

(define-insn
	(name calli)
	(comment "call immediate")
	(syntax "call &${aiaddr}")
	(format (+ OP_CALLI aiaddr))
	(semantics (sequence ()
		; save return address
		(set (reg ra) (add (reg pc) 4))
		; jump
		(set pc aiaddr)
		))
)

(define-insn
	(name syscall)
	(comment "syscall")
	(syntax "syscall $imm")
	(format (+ OP_SYSCALL imm))
;	(semantics )
)

(define-jc-insn eq)
(define-jc-insn ne)
(define-jc-insn ge)
(define-jc-insn gt)
(define-jc-insn le)
(define-jc-insn lt)
(define-jc-insn ltu)
(define-jc-insn geu)
(define-jc-insn gtu)
(define-jc-insn leu)

(define-arith-insn div)
(define-arith-insn-custom divu udiv)
(define-arith-insn mul)
(define-arith-insn add)
(define-arith-insn sub)
(define-arith-insn and)
(define-arith-insn or)
(define-arith-insn xor)
(define-arith-insn sll)
(define-arith-insn sra)
(define-arith-insn srl)

(define-insn
	(name not)
	(comment "not")
	(attrs)
	(syntax "not $rd,$rs")
	(format (+ OP_NOT rd rs))
	(semantics (set rd (not rs)))
)

(define-insn
	(name neg)
	(comment "neg")
	(attrs)
	(syntax "neg $rd,$rs")
	(format (+ OP_NEG rd rs))
	(semantics (set rd (neg rs)))
)

(define-insn
	(name xh)
	(comment "xh")
	(attrs)
	(syntax "xh $rd,$rs")
	(format (+ OP_XH rd rs))
	(semantics (set SI rd (reg HI rs)))
)

(define-insn
	(name xb)
	(comment "xb")
	(attrs)
	(syntax "xb $rd,$rs")
	(format (+ OP_XB rd rs))
	(semantics (set SI rd (reg QI rs)))
)

(define-insn
	(name push)
	(comment "push")
	(syntax "push $rd,$rs")
	(format (+ OP_PUSH rd rs))
	; todo: fixme
	(semantics (set rd (add rd rs)))
)

(define-insn
	(name pop)
	(comment "pop")
	(syntax "pop $rd,$rs")
	(format (+ OP_POP rd rs))
	; todo: fixme
	(semantics (set rd (add rd rs)))
)

(define-insn
	(name ret)
	(comment "ret")
	(syntax "ret")
	(format (+ OP_RET))
	(semantics (set pc (reg ra)))
)

(define-insn
	(name ldr)
	(comment "ldr")
	(attrs)
	(syntax "ld $rd,$rs")
	(format (+ (f-op 3) rd rs))
	(semantics (set rd rs))
)

(define-insn
	(name ldi)
	(comment "ldi")
	(attrs)
	(syntax "ld $rd,$imm")
	(format (+ OP_LDI rd imm))
	(semantics (set rd imm))
)

(define-insn
	(name jpr)
	(comment "jpr")
	(attrs)
	(syntax "jp $rd")
	(format (+ OP_JPR rd))
	(semantics (set pc rd))
)

(define-insn
	(name jpi)
	(comment "jpi")
	(attrs)
	(syntax "jp $imm")
	(format (+ OP_JPI imm))
	(semantics (set pc imm))
)
